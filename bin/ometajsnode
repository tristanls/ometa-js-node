#!/usr/bin/env node

var logly = require( 'logly' );

logly.name( 'ometajsnode' );
    
var usage = "Usage: ometajsnode <-g|--grammar grammar_file> <--grammar-match expr_to_match> [options] input_file";
var help1 = [
    usage,
    "",
    "Options:",
    "  --debug                                      Run in debug mode",
    "  -g, --grammar <file>                         Specifies grammar file to use",
    "  --grammar-match <expression_to_match>        Specifies which expression from the grammar file to match",
    "  -h, --help                                   Displays this information",
    "",
].join( '\n' );
var help2 = [
    "  --no-pipe-out                                Does not format output to be readable as pipe input",
    "                                               (this allows special chars to not be encoded, useful in code emission)",
    "  -o, --output <file>                          Place the output into file",
    ""
].join( '\n' );
var help3 = [
    "  --pipe                                       Pipe mode, expect stdin to be parse object represented as JSON string (instead of a program)",
    "  -u, --utility <module_file[,module_file]>    Specifies a list of modules that will be available for access by ometajs files via __Utilities",
    "                                               Modules used as untilities must export 'utilityName' property to be read",
    ""
].join( '\n' );
var help4 = [
    "                                               For example, my make-unique-ident module could look like:",
    "                                                 exports.untilityName = 'make-unique-ident'",
    "                                               Then any ometajs file could use it via __Utilities['make-unique-ident']",
    ""
].join( '\n' );
var help5 = [
    "  --verbose                                    Run in verbose mode",
    "  --version                                    Version",
    ""
].join( '\n' );

var ometajsnode = require( 'ometajsnode' );

// Retrieve command-line parameters
var arg, args = [], argv = process.argv.slice( 2 ),
    options = {
      input: [],
      loglyMode: 'standard'
    };

// Parse command-line parameters
while ( arg = argv.shift() ) {
  if ( arg === __filename ) continue;
  
  if ( arg[ 0 ] !== '-' ) {
    options.input.push( arg );
  } else {
    arg = arg.match( /^--?(.+)/ )[ 1 ];
    
    switch ( arg ) {
      case 'debug':
        options.loglyMode = 'debug';
        logly.mode('debug');
        break;
      case 'grammar':
      case 'g':
        options.grammar = argv.shift();
        break;
      case 'grammar-match':
        options.rootGrammarExpression = argv.shift();
        break;
      case 'help':
      case 'h':
        process.stdout.write( help1 );
        process.stdout.write( help2 );
        process.stdout.write( help3 );
        process.stdout.write( help4 );
        process.stdout.write( help5 );
        process.exit( 0 );
        break;
      case 'no-pipe-out':
        options.noPipeOut = true;
        break;
      case 'output':
      case 'o':
        options.output = argv.shift();
        break;
      case 'pipe':
        options.pipe = true;
        break;
      case 'utility':
      case 'u':
        options.utilities = argv.shift();
        options.utilities = options.utilities.split( ',' );
        break;
      case 'verbose':
        options.loglyMode = 'verbose';
        logly.mode('verbose');
        break;
      case 'version':
        // using console instead of logly cause we don't want ':'
        console.log( "ometajsnode " + ometajsnode.version );
        process.exit( 0 );
        break;
    }
  }
}

// dump options in debug mode
logly.debug( function() {
  for ( option in options ) {
    if ( !options.hasOwnProperty( option ) ) continue;
    logly.debug( '[OPTION] ' + option + ": " + options[ option ] );
  }
});

// Verify that grammar is specified
if ( !options.grammar ) {
  logly.error( "no grammar specified\n" + usage );
  process.exit( 0 );
}

// Verify that grammar-match expression is specified
if ( !options.rootGrammarExpression ) {
  logly.error( "no grammar-match expression specified\n" + usage );
  process.exit( 0 );
}

//Check that we have input files
if ( options.input.length < 1 ) {
  // no input files, get data from stdin
  options.stdin = '';
  process.openStdin()
    .on( 'data', function( s ) { options.stdin += s } )
    .on( 'end', function() { 
      // execute the program with stdin in options.stdin as input
      ometajsnode.execute( options.loglyMode, options.grammar, options.stdin,
          options.output, options.rootGrammarExpression, options.utilities, 
          options.pipe, options.noPipeOut );
    });
} else {
  // execute the program with program files in options.input as input
  ometajsnode.execute( options.loglyMode, options.grammar, options.input,
      options.output, options.rootGrammarExpression, options.utilities,
      options.pipe, options.noPipeOut );
}

